<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>server = network_create_server(network_socket_tcp, 1220, 10);
clients = ds_map_create();
players = 0;
for(i = 0; i &lt; 10; i += 1)
{
    socks[i] = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var t = ds_map_find_value(async_load, "type");
<<<<<<< HEAD
<<<<<<< HEAD
if(t == network_type_connect)
{
    var sock = ds_map_find_value(async_load, "socket");
    var inst = instance_create(20, 20, objPlayer);
    ds_map_add(clients, sock, inst);
    socks[players] = sock;
=======
=======
>>>>>>> c831fbeebe9086f5a6d446770535b6d91bbc39fc

if(t == network_type_connect)
{
    var sock = ds_map_find_value(async_load, "socket");
    var inst = instance_create(20 + players * 20, 20 + players * 20, objPlayer);
    ds_map_add(clients, players, inst);
    socks[players] = sock;
    
    buff = buffer_create(256, buffer_grow, 1);
    buffer_seek(buff, buffer_seek_start, 0);
    var eid = players;
    buffer_write(buff, buffer_u16, eid);
    network_send_packet(sock, buff, buffer_tell(buff));
<<<<<<< HEAD
>>>>>>> c831fbeebe9086f5a6d446770535b6d91bbc39fc
=======
>>>>>>> c831fbeebe9086f5a6d446770535b6d91bbc39fc
    players += 1;
}

if(t == network_type_disconnect)
{
    var sock = buffer_read(ds_map_find_value(async_load, "buffer"), buffer_u16);
    ds_map_delete(clients, sock);
<<<<<<< HEAD
<<<<<<< HEAD
    socks[sock] = noone;
=======
    socks[sock] = noone
>>>>>>> c831fbeebe9086f5a6d446770535b6d91bbc39fc
=======
    socks[sock] = noone
>>>>>>> c831fbeebe9086f5a6d446770535b6d91bbc39fc
    players -= 1;
}

for(i = 0; i &lt; 10; i += 1)
{
<<<<<<< HEAD
<<<<<<< HEAD
    if(ds_map_exists(clients, i))
    {
        var inst = ds_map_find_value(clients, i);
        var buff = buffer_create(256, buffer_grow, 1);
        buffer_seek(buff, buffer_seek_start, 0);
        buffer_write(buff, buffer_string, "player");
        buffer_write(buff, buffer_s16, i);
        buffer_write(buff, buffer_s16, inst.x);
        buffer_write(buff, buffer_s16, inst.y);
=======
=======
>>>>>>> c831fbeebe9086f5a6d446770535b6d91bbc39fc
    buff = buffer_create(256, buffer_grow, 1);
    buffer_seek(buff, buffer_seek_start, 0);
    if(ds_map_exists(clients, i))
    {
        var inst = ds_map_find_value(clients, i);
        buffer_write(buff, buffer_u16, i);
        buffer_write(buff, buffer_s16, inst.x);
        buffer_write(buff, buffer_u32, inst.y);
<<<<<<< HEAD
>>>>>>> c831fbeebe9086f5a6d446770535b6d91bbc39fc
=======
>>>>>>> c831fbeebe9086f5a6d446770535b6d91bbc39fc
        for(j = 0; j &lt; 10; j += 1)
        {
            if(socks[j] != noone)
            {
                network_send_packet(socks[j], buff, buffer_tell(buff));
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(20, 20, string(players));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
